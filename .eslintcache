[{"B:\\IT\\todo\\src\\index.js":"1","B:\\IT\\todo\\src\\App.js":"2","B:\\IT\\todo\\src\\components\\todo\\todo.js":"3","B:\\IT\\todo\\src\\components\\button\\button.js":"4","B:\\IT\\todo\\src\\components\\input\\input.js":"5","B:\\IT\\todo\\src\\components\\Todo-item\\todoItem.js":"6"},{"size":381,"mtime":1609161509700,"results":"7","hashOfConfig":"8"},{"size":162,"mtime":1609161509698,"results":"9","hashOfConfig":"8"},{"size":2137,"mtime":1609253372622,"results":"10","hashOfConfig":"8"},{"size":239,"mtime":1609163266034,"results":"11","hashOfConfig":"8"},{"size":329,"mtime":1609161509699,"results":"12","hashOfConfig":"8"},{"size":1552,"mtime":1609251775661,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"190iupw",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},"B:\\IT\\todo\\src\\index.js",[],"B:\\IT\\todo\\src\\App.js",[],"B:\\IT\\todo\\src\\components\\todo\\todo.js",["29"],"B:\\IT\\todo\\src\\components\\button\\button.js",[],["30","31"],"B:\\IT\\todo\\src\\components\\input\\input.js",["32","33"],"import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n    render() {\r\n        const { id, name, value, placeholder, className, type } = this.props\r\n        return <>\r\n        <input type={type} placeholder={placeholder} className={className} id={id}></input>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default Input;","B:\\IT\\todo\\src\\components\\Todo-item\\todoItem.js",["34"],"import React, { Component } from 'react'\r\nimport Input from '../input/input'\r\nimport todoItemStyle from \"./todoItem.css\"\r\nclass TodoItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            toggle: false,\r\n        };\r\n        this.handleLabelClick = this.handleLabelClick.bind(this);\r\n    }\r\n\r\n\r\n    handleLabelClick(e) {\r\n        const { toggle } = this.state;\r\n        this.props.onClick(e);\r\n        this.setState({\r\n            toggle: !toggle\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render todoitem\");\r\n        const { className, id } = this.props;\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    this.props.children ? (<div className={this.state.toggle ? className + \" item line\" : className + \" item\"}>\r\n                        <Input className=\"todo-item\" type=\"checkbox\" id={id} />\r\n                        <label htmlFor={id} id={id} onClick={this.handleLabelClick}>{this.props.children}</label>\r\n                    </div>) : (null)\r\n                }\r\n            </>\r\n        )\r\n\r\n        // if (this.props.children) {\r\n        //     console.log(\"hien item\")\r\n        //     return <div className={this.state.toggle ? \" line\" : \"a  \"}>\r\n        //         <Input className=\"todo-item\" type=\"checkbox\" id={id} />\r\n        //         <label htmlFor={id} onClick={this.handleLabelClick}>{this.props.children}</label>\r\n        //     </div>\r\n        // } else {\r\n        //     return null\r\n        // }\r\n    }\r\n}\r\nexport default TodoItem;\r\n",{"ruleId":"35","severity":1,"message":"36","line":40,"column":41,"nodeType":"37","messageId":"38","endLine":40,"endColumn":43},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":5,"column":21,"nodeType":"45","messageId":"46","endLine":5,"endColumn":25},{"ruleId":"43","severity":1,"message":"47","line":5,"column":27,"nodeType":"45","messageId":"46","endLine":5,"endColumn":32},{"ruleId":"43","severity":1,"message":"48","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":21},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'name' is assigned a value but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","'todoItemStyle' is defined but never used.","no-global-assign","no-unsafe-negation"]